var v : int;
var w : int;
var x : int[2];
var y : string[2][2];
var z : string;
type a = int[2];


proc recurse(item : int) : int
  write item;
  if item >= 5 ->
    recurse := 5;
    return;
  [] else ->
    recurse := recurse(item+1);
    return;
  fi

end

proc multiarg(a,b : int, c,d : string) : int
  write a;
  write b;
  write c;
  write d;
  multiarg := a;
end




proc ret_true() : bool
    write 1;
    ret_true := true;
end


x[0] := 5;
x[1] := 6;

write "TESTING Comparison Operators";
write "";
write "TESTING Equals:";
write " Should be false";
write ?(x[0] = x[1]);
x[1] := 5;
write " Should be true";
write ?(x[0] = x[1]);

write "TESTING Not Equals";
write " Should be false";
write ?(x[0] != x[1]);
write " Should be true";
x[1] := 4;
write ?(x[0] != x[1]);

write "TESTING <";
write " Should be false";
write ?(x[0] < x[1]);
write " Should be false";
x[1] := 5;
write ?(x[0] < x[1]);
write " Should be true";
x[1] := 6;
write ?(x[0] < x[1]);

write "TESTING <=";
write " Should be true";
write ?(x[0] <= x[1]);
write " Should be true";
x[1] := 5;
write ?(x[0] <= x[1]);
write " Should be false";
x[1] := 4;
write ?(x[0] <= x[1]);

write "TESTING >=";
write " Should be true";
write ?(x[0] >= x[1]);
write " Should be true";
x[1] := 5;
write ?(x[0] >= x[1]);
write " Should be false";
x[1] := 6;
write ?(x[0] >= x[1]);

write "TESTING >";
write " Should be false";
write ?(x[0] > x[1]);
write " Should be false";
x[1] := 5;
write ?(x[0] > x[1]);
write " Should be true";
x[1] := 4;
write ?(x[0] > x[1]);

write "TESTING %";
write " Should be 1";
write 5%-2;
write " Should be -1";
write -5%-2;

write "TESTING +";
write " Should be 3";
write 1+2;
write " Should be -3";
write -1+-2;

write "TESTING -";
write " Should be 3";
write 6-3;
write " Should be -6";
write -3-3;

write "TESTING *";
write " Should be 6";
write 3*2;
write " Should be -6";
write 3*-2;

write "TESTING /";
write " Should be 1";
write 5/4;
write " Should be 2";
write 8/4;
write " Should be -1";
write -5/4;
write " Should be -2";
write -8/4;

write "TESTING Boolean Or (+)";
write " Should be true";
write ?(true + ret_true());
write " Should be true and print 1";
write ?(false + ret_true());
write " Should be false";
write ?(false + false);

write "TESTING Boolean And (+)";
write " Should be true";
write ?(true * true);
write " Should be false";
write ?(false * true);
write " Should be false";
write ?(true * false);
write " Should be false";
write ?(false * false);
write "Should print 1 and be true";
write ?(true * ret_true());
write "Should be false";
write ?(false * ret_true());

write "TESTING If";
write " Should print 1";

if x[0] = 5 ->
  write 1;
fi;

write " Should print 2";
if x[0] = 6 ->
  write 0;
[] x[0] = 7 ->
  write 1;
[] else ->
  write 2;
fi

write " Should print 3";

if x[0] = 6 ->
  write 0;
[] x[0] = 7 ->
  write 1;
[] x[0] = 5 ->
  write 3;
[] else ->
  write 2;
fi

write "TESTING do";
write " Should print nothing:";
do false ->
  write 1;
od

w := 1;
write " Should print 1-5";
do w < 6 ->
  write w;
  w := w+1;
od

w:= 1;
write " Should print 1-3 (testing break statement)";
do w < 6 ->
  write w;
  if w = 3 ->
    break;
  fi
  w := w+1;
od


write "TESTING fa";
write " Should print 1, once:";
fa i:= 1 to 1 ->
  write i;
af

write " Should print 1-5:";
fa i:= 1 to 5 ->
  write i;
af

write " Should print 1-3 (testing break statement):";
fa i:= 1 to 5 ->
  write i;
  if i = 3 ->
    break;
  fi
af

write "TESTING nested breaks";
write "Should print 1 then 2";
fa i := 1 to 5 ->
  write i;
  fa j := 2 to 5 ->
    write j;
    break;
  af
  break;
af

write "TESTING recursive function calls";
write "Should print 1 - 5, and then 5";
w := recurse(1);
write w;

write "TESTING multiple argument function calls";
write " Should write 5, 6, foo, bar then 5";
z := "foo";
w := multiarg(5, 6, "foo", "bar");
write w;
