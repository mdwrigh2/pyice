#! /usr/bin/env python
import lib.yacc as yacc


import lib.pyice_parser

import sys
import os
from optparse import OptionParser

from lib.pyice_parser import ParseError
from lib.pyice_lexer import LexError
from lib.nodes import TypeError
from lib.symbol_table import ProcInsertionError, SymbolLookupError, SymbolInsertionError


class Compiler:

    def _parse(self, code):
        try:
            self.program = yacc.parse(code)
            # Finished compiling, make sure all functions have definitions
            for func in lib.pyice_parser.functions.values():
                if not func.stmts:
                    raise TypeError(-1, "function declared but not implemented")
        except ParseError, p:
            print >> sys.stderr, "line %d: syntax error near %s" % (p.lineno, p.token)
            sys.exit(100)
        except LexError, l:
            print >> sys.stderr, "line %d: illegal character %s" % (l.lineno, l.token)
            sys.exit(100)
        except TypeError, t:
            print >> sys.stderr, str(t)
            sys.exit(100)
        except ProcInsertionError, e:
            print >> sys.stderr, str(e)
            sys.exit(100)
        except SymbolLookupError, e:
            print >> sys.stderr, str(e)
            sys.exit(100)
        except SymbolInsertionError, e:
            print >> sys.stderr, str(e)
            sys.exit(100)


    def compile_file(self, inputs, filename, ast):
        out = open(filename, "w")
        self._parse(inputs)
        path, extension = os.path.splitext(filename)
        classname = os.path.split(path)[1]
        if ast:
            out.write(self.program)
        else:
            out.write(self.program.jasmin(classname, lib.pyice_parser.var_decs, lib.pyice_parser.functions))
        out.close()
    



def start_compiler():
    parser = OptionParser()
    parser.add_option("-a", "--ast",
                      help="output the AST", action="store_true", dest="ast")

    (options, args) = parser.parse_args()
    files = args
    

    Compiler().compile_file(sys.stdin.read(), args[0], options.ast)


if __name__ == '__main__':
    start_compiler()
